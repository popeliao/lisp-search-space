
(Defun State (node) (first node)) 
(Defun Operator (node) (second node)) 
(Defun Parent (node) (third node))
(Defun g-hat (node) (nth 3 node))


(defun uniform-cost-search (s0 sg sons) 

(let ((open (list (list s0 nil nil 0))) ;note the inner list is a node 
    ( closed nil ) 
    ( n nil ) 
    ( daughters nil )) ;ok i added another one 
    (loop 
		(if (null open) (return 'fail)) 

		(setf n (pop open)) ;Ok, remove the first node 
		;and update open and 
		(push n closed) ;update closed with n since we expand it next
		(if (**equal** (State n) sg)  
			(return (trace-solution n)) )
		(setf daughters (funcall sons n)) 
		(setf daughters 
			(DIFF daughters closed #'compNode)) ;Remove duplicate states 
		;(print daughters) ;debug
		(setf open  
			(UPDATE open daughters ))
		;(print "debug2") 
		(setf open   
     		(sort open 
            #'(lambda(node1 node2) (< (g-hat node1) (g-hat node2))))) ;ends setf
		;(print "debug7") 
		(setf open (append open daughters)) ;open is used as a QUEUE, thus its bfs.
		;(print "debug8") 
	  ) ;closes loop 
) ;closes let 
) ;closes defun

(defun UPDATE (open daughters )
	;iterate through items in daughters, 
	;iterate through jtems in open
	;if j.state = i.state and i.ghat < j.ghat, update j with i
	(cond ((null daughters) open)
		(t  (setf open (update-iter open (car daughters)))
			(setf open (UPDATE open (cdr daughters)  ))
			open )))

(defun update-iter (open item )
	(cond 	((null open) (list item)) ;i not in open, add it
			((compNode (car open) item) ;if i.state == j.state
				(if (< (g-hat (car open)) (g-hat item)) 
					(setf (g-hat (car open)) (g-hat item))						
					)
				open			 
			) 
			(t  (cons (car open) (update-iter (cdr open) item))))) 

(defun **equal** (a b)
    (equal a b))


(defun successor-function (node) 
	(let ( (son-nodes nil) (son-states nil) (state (first node)) (cost (+ (g-hat node) 1)) )
	;north
	(setf son-states (North state)) 
	(setf son-nodes 
	(mapcar	#'(lambda (son-state) (list son-state 'NORTH node cost)) son-states ))
 	;south
	(setf son-states (South state)) 
	(setf son-nodes
	    (append son-nodes 
	    (mapcar	#'(lambda (son-state) (list son-state 'SOUTH node cost)) son-states ))) 
 	;east
	(setf son-states (East state)) 
	(setf son-nodes
	    (append son-nodes 
	    (mapcar	#'(lambda (son-state) (list son-state 'EAST node cost)) son-states ))) 
 	;west
	(setf son-states (West state)) 
	(setf son-nodes
	    (append son-nodes 
	    (mapcar	#'(lambda (son-state) (list son-state 'WEST node cost)) son-states ))) 
		;update g-hat value for the node
	son-nodes ) ) 






(defun DIFF (a b comp) 
    (cond ((null b) a)
        (t 
          (setf a (minus a (car b) comp))
          (intersection a (DIFF a (cdr b) comp))  
        )))

(defun minus (a bc comp)
    (cond ((null a) nil)
    (t        
        (cond 
            ((funcall comp (car a) bc) (cdr a))
            (t  (cons (car a) (minus (cdr a) bc comp))))
    )))

(defun compNode (x y)
    (equal (first x) (first y)))



(defun trace-solution (node) 
    (cond 
        ((null (third node)) (print "Beginning of solution")) 
        (t (trace-solution (Parent node)) 
            (print (Operator node))
		(print "*********"))
    )
)
