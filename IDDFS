; this version IDDFS doesn't maintain an open list or closed list
(Defun State (node) (first node)) 
(Defun Operator (node) (second node)) 
(Defun Parent (node) (third node))

(defun iddfs (s0 sg sons depth increment)
	(if (DBDFS	(list s0 nil nil) ; make a node to fit the argument of dbdfs
					sg 
					sons 
					depth) 
		(return-from iddfs t)
		(iddfs s0 sg sons (+ depth increment) increment)))
		
(defun DBDFS (node goal successors depth)
  (let  ( (daughters nil) )  
   (if (**equal** (state node) goal) (return-from DBDFS (trace-solution node))) ;base case
   (if (= depth 1) (return-from DBDFS nil)) ;touch the limit with no goal approached
   (setf daughters (funcall successors node)) 
   (loop             ;iterate all the approachable sons, but didn't use open, closed list to help
     (if (null daughters) (return-from DBDFS nil)) 
     (if (DBDFS        ;recursive call with
                   (pop daughters) ;the first of daughters& daughters updated
                   goal            ;same old goal state
                   successors      ;same old set of operators
                   (- depth 1))    ;but a shallower depth!
         (return-from DBDFS t) ;here we did find a solution so we leave happy
       ) ;end if
        ) ;ends loop
         ) ;ends let
          ) ;ends defun 

(defun **equal** (a b)
    (equal a b))


(defun successor-function (node) 
    (let ( (son-nodes nil) (son-states nil) (state (first node)) ) 
	;north
	(setf son-states (North state)) 
	(setf son-nodes 
	(mapcar	#'(lambda (son-state) (list son-state 'NORTH node)) son-states ))
 	;south
	(setf son-states (South state)) 
	(setf son-nodes
	    (append son-nodes 
	    (mapcar	#'(lambda (son-state) (list son-state 'SOUTH node)) son-states ))) 
 	;east
	(setf son-states (East state)) 
	(setf son-nodes
	    (append son-nodes 
	    (mapcar	#'(lambda (son-state) (list son-state 'EAST node)) son-states ))) 
 	;west
	(setf son-states (West state)) 
	(setf son-nodes
	    (append son-nodes 
	    (mapcar	#'(lambda (son-state) (list son-state 'WEST node)) son-states ))) 
	son-nodes)) 






(defun DIFF (a b comp) 
    (cond ((null b) a)
        (t 
          (setf a (minus a (car b) comp))
          (intersection a (DIFF a (cdr b) comp))  
        )))

(defun minus (a bc comp)
    (cond ((null a) nil)
    (t        
        (cond 
            ((funcall comp (car a) bc) (cdr a))
            (t  (cons (car a) (minus (cdr a) bc comp))))
    )))

(defun compNode (x y)
    (equal (first x) (first y)))



(defun trace-solution (node) 
    (cond 
        ((null (third node)) (print "Beginning of solution")) 
        (t (trace-solution (Parent node)) 
            (print (Operator node))
		(print "*********")
        )
    )
)
